diff --git a/src/server/game/Achievements/AchievementMgr.cpp b/src/server/game/Achievements/AchievementMgr.cpp
--- a/src/server/game/Achievements/AchievementMgr.cpp
+++ b/src/server/game/Achievements/AchievementMgr.cpp
@@ -1965,6 +1965,9 @@
         return;
 
     SendAchievementEarned(achievement);
+    /** World of Warcraft Armory **/

+    GetPlayer()->WriteWowArmoryDatabaseLog(1, achievement->ID);

+    /** World of Warcraft Armory **/
     CompletedAchievementData& ca =  m_completedAchievements[achievement->ID];
     ca.date = time(NULL);
     ca.changed = true;
diff --git a/src/server/game/Entities/Item/Item.cpp b/src/server/game/Entities/Item/Item.cpp
--- a/src/server/game/Entities/Item/Item.cpp
+++ b/src/server/game/Entities/Item/Item.cpp
@@ -1018,6 +1018,15 @@
         if (pItem->Create(sObjectMgr->GenerateLowGuid(HIGHGUID_ITEM), item, player))
         {
             pItem->SetCount(count);
+            /** World of Warcraft Armory **/
+            if (pProto->Quality > 2 && pProto->Flags != 2048 && (pProto->Class == ITEM_CLASS_WEAPON || pProto->Class == ITEM_CLASS_ARMOR) && player)
+            {
+                std::ostringstream ss;
+                sLog->outDetail("WoWArmory: write feed log (guid: %u, type: 2, data: %u)", player->GetGUIDLow(), item);
+                ss << "REPLACE INTO character_feed_log (guid, type, data, date, counter, item_guid) VALUES (" << player->GetGUIDLow() << ", 2, " << item << ", UNIX_TIMESTAMP(NOW()), 1," << pItem->GetGUIDLow()  << ")";
+                CharacterDatabase.PExecute( ss.str().c_str() );
+            }
+            /** World of Warcraft Armory **/
             return pItem;
         }
         else
diff --git a/src/server/game/Entities/Player/Player.cpp b/src/server/game/Entities/Player/Player.cpp
--- a/src/server/game/Entities/Player/Player.cpp
+++ b/src/server/game/Entities/Player/Player.cpp
@@ -17892,6 +17892,17 @@
     std::string sql_name = m_name;
     CharacterDatabase.escape_string(sql_name);
 
+    /** World of Warcraft Armory **/

+    std::ostringstream ps;

+    ps << "REPLACE INTO armory_character_stats (guid,data) VALUES ('" << GetGUIDLow() << "', '";

+    for(uint16 i = 0; i < m_valuesCount; ++i )

+    {

+        ps << GetUInt32Value(i) << " ";

+    }

+    ps << "')";

+    CharacterDatabase.Execute( ps.str().c_str() );

+    /** World of Warcraft Armory **/
+
     std::ostringstream ss;
     ss << "REPLACE INTO characters (guid,account,name,race,class,gender,level,xp,money,playerBytes,playerBytes2,playerFlags,"
         "map, instance_id, instance_mode_mask, position_x, position_y, position_z, orientation, "
@@ -24393,3 +24404,33 @@
 
     return ((float)sum) / count;
 }
+
+/** World of Warcraft Armory **/

+void Player::WriteWowArmoryDatabaseLog(uint32 type, uint32 data)

+{

+    uint32 pGuid = GetGUIDLow();

+    sLog->outDetail("WoWArmory: write feed log (guid: %u, type: %u, data: %u", pGuid, type, data);

+    if (type <= 0)	// Unknown type

+    {

+        sLog->outError("WoWArmory: unknown type id: %d, ignore.", type);

+        return;

+    }

+    if (type == 3)	// Do not write same bosses many times - just update counter.

+    {

+        uint8 Difficulty = GetMap()->GetDifficulty();

+        QueryResult result = CharacterDatabase.PQuery("SELECT counter FROM character_feed_log WHERE guid='%u' AND type=3 AND data='%u' AND difficulty='%u' LIMIT 1", pGuid, data, Difficulty);

+        if (result)

+        {

+            CharacterDatabase.PExecute("UPDATE character_feed_log SET counter=counter+1, date=UNIX_TIMESTAMP(NOW()) WHERE guid='%u' AND type=3 AND data='%u' AND difficulty='%u' LIMIT 1", pGuid, data, Difficulty);

+        }

+        else

+        {

+            CharacterDatabase.PExecute("INSERT INTO character_feed_log (guid, type, data, date, counter, difficulty) VALUES('%u', '%d', '%u', UNIX_TIMESTAMP(NOW()), 1, '%u')", pGuid, type, data, Difficulty);

+        }

+    }

+    else

+    {

+        CharacterDatabase.PExecute("REPLACE INTO character_feed_log (guid, type, data, date, counter) VALUES('%u', '%d', '%u', UNIX_TIMESTAMP(NOW()), 1)", pGuid, type, data);

+    }

+}

+/** World of Warcraft Armory **/
\ No newline at end of file
diff --git a/src/server/game/Entities/Player/Player.h b/src/server/game/Entities/Player/Player.h
--- a/src/server/game/Entities/Player/Player.h
+++ b/src/server/game/Entities/Player/Player.h
@@ -2235,6 +2235,8 @@
         float m_homebindZ;
 
         WorldLocation GetStartPosition() const;
+        /** World of Warcraft Armory **/

+        void WriteWowArmoryDatabaseLog(uint32 type, uint32 data);
 
         // currently visible objects at player client
         typedef std::set<uint64> ClientGUIDs;
diff --git a/src/server/game/Entities/Unit/Unit.cpp b/src/server/game/Entities/Unit/Unit.cpp
--- a/src/server/game/Entities/Unit/Unit.cpp
+++ b/src/server/game/Entities/Unit/Unit.cpp
@@ -15377,7 +15377,11 @@
                 if (m->IsRaidOrHeroicDungeon())
                 {
                     if (creature->GetCreatureInfo()->flags_extra & CREATURE_FLAG_EXTRA_INSTANCE_BIND)
-                        ((InstanceMap *)m)->PermBindAllPlayers(creditedPlayer);
+                    {
+                        /** World of Warcraft Armory **/

+                        creditedPlayer->WriteWowArmoryDatabaseLog(3, creature->GetCreatureInfo()->Entry);

+                        /** World of Warcraft Armory **/
+                    }
                 }
                 else
                 {
